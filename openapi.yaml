openapi: 3.0.0
info:
  title: Medical API
  version: 1.1.0
  description: REST API for managing doctors, specialties, patients, and appointments (UUID-based).

servers:
  - url: https://medical-api.on.qriarlabs.com

paths:
  /doctors:
    get:
      summary: List all doctors
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Doctor' }
    post:
      summary: Create a doctor
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DoctorInput' }
      responses:
        '201':
          description: Doctor created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Doctor' }

  /doctors/{id}:
    get:
      summary: Get doctor by UUID
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Doctor data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Doctor' }
        '404': { description: Doctor not found }
    patch:
      summary: Patch doctor
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DoctorInput' }
      responses:
        '200': { description: Doctor updated }
    delete:
      summary: Delete doctor
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200': { description: Doctor deleted }

  /specialties:
    get:
      summary: List specialties
      responses:
        '200':
          description: List of specialties
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Specialty' }
    post:
      summary: Create specialty
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SpecialtyInput' }
      responses:
        '201':
          description: Specialty created

  /specialties/{id}:
    get:
      summary: Get specialty by UUID
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Specialty data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Specialty' }
    patch:
      summary: Patch specialty
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SpecialtyInput' }
      responses:
        '200': { description: Specialty updated }
    delete:
      summary: Delete specialty
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200': { description: Specialty deleted }

  /patients:
    get:
      summary: List patients
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Patient' }
    post:
      summary: Create patient
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PatientInput' }
      responses:
        '201':
          description: Patient created

  /patients/{id}:
    get:
      summary: Get patient by UUID
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Patient data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Patient' }
    patch:
      summary: Patch patient
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PatientInput' }
      responses:
        '200': { description: Patient updated }
    delete:
      summary: Delete patient
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200': { description: Patient deleted }

  /appointments:
    get:
      summary: List appointments
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Appointment' }
    post:
      summary: Create appointment
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AppointmentInput' }
      responses:
        '201':
          description: Appointment created

  /appointments/{id}:
    get:
      summary: Get appointment by UUID
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Appointment data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Appointment' }
    patch:
      summary: Patch appointment
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AppointmentInput' }
      responses:
        '200': { description: Appointment updated }
    delete:
      summary: Delete appointment
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200': { description: Appointment deleted }

components:
  parameters:
    UUID:
      name: id
      in: path
      required: true
      description: UUID of resource
      schema:
        type: string
        format: uuid

  schemas:
    Doctor:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string }
        specialty_id: { type: string, format: uuid }

    DoctorInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        specialty_id: { type: string, format: uuid }

    Specialty:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }

    SpecialtyInput:
      type: object
      properties:
        name: { type: string }

    Patient:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string }
        birthdate: { type: string, format: date }

    PatientInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        birthdate: { type: string, format: date }

    Appointment:
      type: object
      properties:
        id: { type: string, format: uuid }
        doctor_id: { type: string, format: uuid }
        patient_id: { type: string, format: uuid }
        date: { type: string, format: date }
        time: { type: string }
        notes: { type: string }

    AppointmentInput:
      type: object
      properties:
        doctor_id: { type: string, format: uuid }
        patient_id: { type: string, format: uuid }
        date: { type: string, format: date }
        time: { type: string }
        notes: { type: string }
